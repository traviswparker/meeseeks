#!/usr/bin/env python3

import sys
import logging
import json
import time

from meeseeks import Client

def pretty_print(d): print (json.dumps(d, sort_keys=True, indent=4))

def usage():
    print("""
%s [options] <command> [args...]

    commands are:
        submit <pool[@node]> <executable> [args....]
            options for submit:
                nodelist= (list of nodes to route job through)
                stdin= stdout= stderr= (redirect job in/out/err to files named)
                restart_on_done= (1=restart)
                restart_on_fail= (1=restart)
                max_runtime= (max runtime of job)

        get [jobid,jobid...] (get all or specified jobs)
            options for get:
                node= pool= ts= (query filters for jobs)

        kill <jobid> [,jobid...]

        status (prints all node status)

        pools (prints all pools and free slots)

    generic options are: 
        address= (default localhost)
        port= (defult 13700)
        refresh= (interval to continuously refresh status until no jobs left)

"""%sys.argv[0])

#parse args
# cfg={key[.subkey]=value[,value..] args preceeding first non = argument}
# cmd=first non cfg argument
# args=remaining arguments
cfg={ 'address':'localhost' } 
try:
    cmd,args=None,[]
    for i,arg in enumerate(sys.argv[1:]):
        if '=' in arg:
            k,v=arg.split('=',1)
            s=None #sub dict, for k.s=v arguments
            if '.' in k:
                k,sk=k.split('.',1)
                s=cfg.setdefault(k,{})
            if v.isnumeric(): v=int(v)
            elif ',' in v: v=list(v.split(','))
            if s is not None: s[sk]=v
            else: cfg[k]=v
        else: 
            cmd,args=sys.argv[i+1],sys.argv[i+2:] #end of options
            break
    logging.basicConfig(level=cfg.get('log',logging.INFO))
    logging.debug('%s %s %s'%(cfg,cmd,args))
    client=Client(**cfg) #create client and connect
    jids=None
    #get query spec from config if any
    query=dict((k,v) for (k,v) in cfg.items() if k in ['node','pool','ts'])
    #if we will be refreshing, refresh now until state populated
    if cfg.get('refresh'):
        while not client.get_node_status(): time.sleep(1)
    if cmd == 'submit':
        #get pool, args and optional node selection
        pool,args,node=args[0],args[1:],None
        if '@' in pool: pool,node=pool.split('@',1)
        #if we are refreshing on the job, submit locally and let it dispatch
        if cfg.get('refresh'): jids=[client.add_job(pool=pool,args=args,node=node,**cfg)]
        #submit directly and return jid
        else: print(client.submit(pool=pool,args=args,node=node,**cfg))
    elif cmd == 'get':
        if cfg.get('refresh'):
            if args: jids=args
            else: jids=True #get all
        elif args:
            for arg in args: pretty_print({arg:client.query(arg)})
        else: pretty_print(client.query(**query))
    elif cmd == 'kill': 
        for arg in args: pretty_print({arg:client.kill(arg)})
        if cfg.get('refresh') and args: jids=args
    elif cmd == 'status': 
        if cfg.get('refresh'): 
            while True:
                pretty_print(client.get_node_status())
                time.sleep(cfg.get('refresh'))
        else: pretty_print(client.status()['nodes'])
    elif cmd == 'pools': 
        if cfg.get('refresh'): 
            while True:
                pretty_print(client.get_pool_status())
                time.sleep(cfg.get('refresh'))
        else: pretty_print(client.status()['pools'])
    elif cmd == 'ls': pretty_print(client.ls(**cfg))
    else: sys.exit(usage())
    #refreshing on jobs
    if jids:
        seq={} #sequence numbers for printing updates
        while True: 
            if jids is True: jobs=client.get(**query)
            else: jobs=dict((jid,client.get_job(jid)) for jid in jids)
            if not any(jobs.values()): break #exit when no jobs left
            #print updates (when job seq != saved seq)
            updates=dict((jid,job) for (jid,job) in jobs.items() if job['seq'] != seq.get(jid))
            if updates: pretty_print(updates)
            seq=dict((jid,job['seq']) for (jid,job) in jobs.items())
            time.sleep(cfg.get('refresh'))
except Exception as e: print (e,file=sys.stderr)

#if we were polling state, stop gracefully
if cfg.get('refresh'): client.close()