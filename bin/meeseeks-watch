#!/usr/bin/env python3

import sys
import logging
import signal
import os
import time
import threading
import glob

from meeseeks.util import *
from meeseeks.client import Client
from meeseeks.watch import Watch
from meeseeks.config import Config

global CFG,WATCH,CLIENT,SHUTDOWN,logger
logger=None
CLIENT=None
CFG=Config(cleanup=300) #default config
#CFG.autoresolve=False #we do our own templating
WATCH={} #watch threads we're running 
SHUTDOWN=threading.Event()   

def usage():

    print("""
meeseeks-watch [key=value]... [config-file]
    watches files, submits jobs

JSON config format, can also be specified on command line as key.subkey..=value|value,value
{
    "name" : <string> name for logging
    "defaults" : { defaults for all other sections },
    "run" : <template(s)> will apply template(s) to all watch configs to generate <template>-<name>,
    "client" : { configuration for connecting to meeseeks },
    "template" : {
        "<name>": { defines a watch template, see watch spec }
    },
    "watch" : {
        "<name>": { 
            "template": <name> or [ <name>, ... ] applies templates to this watch config.
            "path" : <path to watch>
            "glob" : <pattern> | [ <pattern>, ... ]
            
            (see README for all watch options)

            "jobs" : [
                { jobspec } | [ {jobspec}, ... ] ,
                    jobspec(s) to submit on first (usually newest) file/fileset in the list(s)
                ,   
                    {} | [{},...]
                    jobspec(s) to submit on next file/fileset...
                , ..... ,
                    {} | [{},...]
                    last jobspec(s) will be submitted on all other unprocessed files
            ]
        } 
    }
}
""")

def apply_config(cfg):
    global CFG,CLIENT,WATCH,logger
    logger.info('reloading config')
    CFG.update(cfg)
    #load config defaults
    defaults=CFG.get('defaults',{})

    #init client
    if not CLIENT: 
        ccfg={'refresh':1,**defaults,**cfg.get('client',{})}
        CLIENT=Client(**ccfg)
        CLIENT.wait() #wait for the client to sync initial state

    #build watch configs
    watch={}
    for w,wsrc in cfg.get('watch',{}).items():
        #run key > watch template > default template > None
        templates=cfg.get('run',wsrc.get('template',defaults.get('template'))) 
        if type(templates) is not list: templates=[templates]
        if templates: #for each template build a watch config
            for template in templates: 
                #build watch config defaults+template+source
                if template in cfg.get('template',{}):
                    watch['_'.join([cfg['name'],template,w])]=Config(defaults,cfg['template'][template],wsrc)
        else: watch['_'.join([cfg['name'],w])]=Config(defaults,wsrc) #no template, use defaults+source

    for w in WATCH.copy(): #stop removed watches
        if w not in watch: stop_watch(w)
    
    for w,wcfg in watch.items(): #start new/config existing watches
        if w not in WATCH: #add new
            if 'plugin' in wcfg:
                w_class=import_plugin(wcfg['plugin'])
                del wcfg['plugin']
            else: w_class=Watch
            logger.info('starting %s %s'%(w_class,w))
            WATCH[w]=w_class(w,client=CLIENT,**wcfg)
        else: WATCH[w].config(**wcfg) #reconfigure existing

def stop_watch(w):
    global WATCH
    wt=WATCH[w]
    wt.shutdown.set()
    wt.join()
    del WATCH[w]

def signal_stop(*args):
    global SHUTDOWN,logger
    logger.debug(args)
    SHUTDOWN.set()

def signal_reload(*args):
    logger.debug(args)
    apply_config(get_config())

def get_config():
    global logger
    cfgargs,args=cmdline_parser(sys.argv[1:])
    cfg=Config(read_cfg_files(args),cfgargs) #we want cmdline to override files
    logging.basicConfig(**cfg.get('logging',{'level':logging.INFO}))
    #set name to name if specified, else executable
    cfg.update(name=cfg.get('name', os.path.basename(sys.argv[0])))
    logger=logging.getLogger(name=cfg['name'])
    return cfg


#do we have args?
if len(sys.argv) < 2: sys.exit(usage())

#get config
apply_config(get_config())
#set signal handlers
signal.signal(signal.SIGINT,signal_stop)
signal.signal(signal.SIGTERM,signal_stop)
signal.signal(signal.SIGHUP,signal_reload)

#slow state file cleanup
while not SHUTDOWN.is_set(): 
    if CFG.get('cleanup'):
        paths=[w.path for w in WATCH.values()]
        for path in paths:
            if not path: continue
            if SHUTDOWN.is_set(): break
            logger.debug('cleaning up %s'%path)
            hidden_files=glob.glob(os.path.join(path,'._*'))
            for hf in hidden_files:
                if SHUTDOWN.is_set(): break
                #from ._name_index_file.state get file.state, strip off state
                file='.'.join( os.path.split(hf)[1].split('_',4)[3].split('.')[:-1] )
                try:
                    if not os.path.exists(os.path.join(path,file)):
                        logger.debug('%s %s does not exist, removed %s'%(path,file,hf))
                        os.unlink(hf)
                except Exception as e: logger.debug(e)
            time.sleep(1)
        c=0
        #interruptible sleep until next cleanup
        while not SHUTDOWN.is_set():
            c+=1
            time.sleep(1)
            #exit if all watch threads have exited
            if not any(wt.is_alive() for wt in WATCH.values()): 
                SHUTDOWN.set()
                break
            if c > CFG['cleanup']: break
    else: 
        time.sleep(1)
        if not any(wt.is_alive() for wt in WATCH.values()): SHUTDOWN.set()
    
    

#shut down all watches
for w in list(WATCH.keys()): stop_watch(w)

#close client to ensure state is synced
logger.info('shutting down')
CLIENT.close()